{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","handleChange","target","name","value","submit","event","preventDefault","payload","url","method","resetUserInputs","error","displayBlogPost","length","map","post","index","this","onSubmit","className","type","placeholder","onChange","cols","rows","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAyGeA,E,4MAtGbC,MAAM,CACJC,MAAO,GACPC,KAAO,GACPC,MAAO,I,EAGTC,kBAAoB,WAClB,EAAKC,e,EAEPA,YAAc,WACZC,IAAMC,IAAI,QACHC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAMO,IACtBE,QAAQC,IAAI,yBAEbC,OAAM,WACLC,MAAM,kC,EAIhBC,aAAe,YAAgB,IAAbC,EAAY,EAAZA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAEd,EAAKR,SAAL,eAAiBO,EAAOC,K,EAG1BC,OAAO,SAACC,GACNA,EAAMC,iBAEN,IAAMC,EAAU,CACdtB,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAGnBI,IAAM,CACJkB,IAAI,YACJC,OAAO,OACPf,KAAMa,IAEPf,MAAK,WACJI,QAAQC,IAAI,oCACZ,EAAKa,kBACL,EAAKrB,iBAENS,OAAM,SAACa,GACNf,QAAQC,IAAI,6B,EAIhBa,gBAAkB,WAChB,EAAKf,SAAS,CACZV,MAAO,GACPC,KAAM,M,EAIV0B,gBAAkB,SAACzB,GACjB,IAAIA,EAAM0B,OAAQ,OAAO,KAEzB1B,EAAM2B,KAAI,SAACC,EAAKC,GAEPD,EAAK9B,MACN8B,EAAK7B,S,4CAKf,WAEE,OADAU,QAAQC,IAAI,QAAQoB,KAAKjC,OAEvB,gCACA,mDACA,uBAAMkC,SAAUD,KAAKb,OAArB,UACI,qBAAKe,UAAU,aAAf,SACA,uBACIC,KAAK,OACLlB,KAAK,QACLmB,YAAY,QACZlB,MAAOc,KAAKjC,MAAMC,MAClBqC,SAAUL,KAAKjB,iBAGnB,qBAAKmB,UAAU,aAAf,SACE,0BACEE,YAAY,OACZnB,KAAK,OACLqB,KAAK,KACLC,KAAK,KACLrB,MAAOc,KAAKjC,MAAME,KAClBoC,SAAUL,KAAKjB,iBAGnB,sD,GA9FQyB,IAAMC,WCUTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49526796.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nclass App extends React.Component{\n  state={\n    title: '',\n    body : '',\n    posts: []\n  };\n\n  componentDidMount = () => {\n    this.getBlogPost();\n  }\n  getBlogPost = () => {\n    axios.get('/api')\n          .then((response)=>{\n            const data = response.data;\n            this.setState({ posts:data });\n            console.log('Data Received..!!!');\n          })\n          .catch(()=>{\n            alert('Error retrieving data..!!!');\n          });\n  }\n\n  handleChange = ({ target }) =>{\n    const { name, value } = target;\n    \n    this.setState({ [name]: value });\n  }\n\n  submit=(event)=>{\n    event.preventDefault();\n\n    const payload = {\n      title: this.state.title,\n      body: this.state.body\n    }\n\n    axios({\n      url:'/api/save',\n      method:'POST',\n      data: payload\n    })\n    .then(()=>{\n      console.log('Data has been send to the Server');\n      this.resetUserInputs();\n      this.getBlogPost();\n    })\n    .catch((error)=>{\n      console.log('Internal server error');\n    });\n  };\n\n  resetUserInputs = () => {\n    this.setState({\n      title: '',\n      body: ''\n    });\n  };\n\n  displayBlogPost = (posts) => {\n    if(!posts.length) return null;\n\n    posts.map((post,index) => {\n      <div key = {index}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    });\n  };\n\n  render(){\n    console.log(\"State\",this.state);\n    return(\n      <div>\n      <h2>Welcome to my App</h2>\n      <form onSubmit={this.submit}>\n          <div className=\"form-input\">\n          <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={this.state.title}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <textarea\n              placeholder=\"body\" \n              name=\"body\" \n              cols=\"30\" \n              rows=\"10\"\n              value={this.state.body}\n              onChange={this.handleChange}>\n             </textarea>\n          </div>\n          <button>Submit</button>\n        </form>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}